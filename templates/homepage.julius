
const markers = [];

mapboxgl.accessToken = #{mapboxPk};

const map = new mapboxgl.Map({
  container: #{idMap},
  center: [76.9406462, 43.2239423],
  zoom: 9,
  style: "mapbox://styles/mapbox/dark-v11"
});

map.addControl(new mapboxgl.ScaleControl(),'bottom-left');

const nav = new mapboxgl.NavigationControl({
  showCompass: true,
  showZoom: false,
  visualizePitch: true
});

map.addControl(nav);

Array.from(
  document.body.querySelectorAll('.mapboxgl-ctrl-compass')
).forEach(x => {
  x.classList.add('circle','large','small-blur');
});

const queryTourism = #{query "tourism" Nothing};
const queryParks = #{query "leisure" (Just "park")};
const queryRestaurant = #{query "amenity" (Just "restaurant")};
const queryGovernment = #{query "government" Nothing};

markMap(queryTourism,'marker-tourism');

var currentSwitch = 'attractions';

document.getElementById(#{idButtonSwitch}).addEventListener('click', function (e) {
  if (currentSwitch === 'attractions') {
    markMap(queryParks,'marker-parks').then(_ => {
      e.target.querySelector('i').textContent = 'restaurant';
    });
    currentSwitch = 'park';
  } else if (currentSwitch === 'park') {
    markMap(queryRestaurant,'marker-restaurant').then(_ => {
      e.target.querySelector('i').textContent = 'account_balance';
    });
    currentSwitch = 'restaurant';
  } else if (currentSwitch === 'restaurant') {
    markMap(queryGovernment,'marker-government').then(_ => {
      e.target.querySelector('i').textContent = 'attractions';
    });
    currentSwitch = 'government';
  } else if (currentSwitch === 'government') {
    markMap(queryTourism,'marker-tourism').then(_ => {
      e.target.querySelector('i').textContent = 'park';
    });
    currentSwitch = 'attractions';
  }
});


const searchSheet = document.getElementById(#{idDialogSearch});

document.getElementById(#{idButtonSearchTrigger}).addEventListener('click', e => {
  searchSheet.show();
});

document.getElementById(#{idButtonCloseSearchDialog}).addEventListener('click', e => {
  searchSheet.close();
});


document.getElementById(#{idButtonSearchByCategoryTrigger}).addEventListener('click', e => {
  document.getElementById(#{idDialogSearchByCategory}).show();
});

document.getElementById(#{idButtonCloseSearchByCategoryDialog}).addEventListener('click', e => {
  document.getElementById(#{idDialogSearchByCategory}).close();
});

document.getElementById(#{idButtonMainMenu}).addEventListener('click', e => {
  document.getElementById(#{idDialogMainMenu}).show();
});

document.getElementById(#{idListSearchResults}).addEventListener('scroll', e => {
  e.preventDefault();
  e.stopPropagation();
});


[ [#{idDialogSearch}, #{idListSearchResults}]
].map(
  xs => xs.map(x => document.getElementById(x))
).map(
  ([dlg,list]) => [dlg,list,dlg.querySelector('[draggable=true]')]
).forEach(([sheet,list,draggable]) => {
  
  draggable.addEventListener('dragstart', e => {
    e.preventDefault();
    e.stopPropagation();
  });
  
  draggable.addEventListener('drag', e => {
    const h = `${window.innerHeight - e.clientY + 32}px`;
    list.style.height = `calc(${h}  - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });
  
  draggable.addEventListener('dragend', e => {
    const h = `${window.innerHeight - e.clientY + 32}px`;
    list.style.height = `calc(${h} - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('touchstart', e => {
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('touchmove', e => {
    const h = `${window.innerHeight - e.touches.item(0).clientY + 32}px`;
    list.style.height = `calc(${h} - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });
  
});


const listSearch = document.getElementById(#{idListSearchResults});
const pois = [];

document.getElementById(#{idInputSearch}).addEventListener('input', debounce( function (e) {

  if (!!e.target.value) {

    listSearch.replaceChildren(progress());
    
    const query = new URLSearchParams({
      q: e.target.value,
      countrycodes: #{countrycodes},
      viewbox: #{bbox},
      format: 'json'
    });
    
    const url = encodeURIComponent(new URL(`#{rawJS nominatim}?${query}`).href);
    
    fetch(`@{FetchR}?url=${url}`,{
      headers: {'Accept': 'application/json'}
    }).then(data => data.json()).then(function (res) {

      if (res.length > 0) {
        
        listSearch.replaceChildren( ... res.map(x => {
          const item = document.createElement('a');
          item.className = 'row padding surface-container wave';

          const start = document.createElement('i');
          start.textContent = 'explore_nearby';      
          
          const content = document.createElement('div');
          content.className = 'max';
          
          const primaryText = document.createElement('div');
          primaryText.className = 'max';
          primaryText.textContent = x['display_name'];

          const end = document.createElement('i');
          end.textContent = 'arrow_forward_ios';
          
          content.appendChild(primaryText);
          
          item.appendChild(start);
          item.appendChild(content);
          item.appendChild(end);

          item.addEventListener('click', e => {
            
            searchSheet.close();
            setTimeout(() => {
              const poi = new mapboxgl.Marker().setLngLat([x.lon, x.lat]).setOffset([0,-8]).addTo(map);
              pois.push(poi);
              map.flyTo({
                center: poi.getLngLat().toArray(),
                essential: true
              });
            },300);
            
          });
          
          return item;
          
        }));

      } else {
        
        listSearch.replaceChildren((() => {
          const msg = document.createElement('div');
          msg.className = 'italic padding';
          msg.textContent = #{msgr MsgNoLocationsWereFound};
          return msg; 
        })());
        
      }
      
    });

  } else {
    
    pois.forEach(x => { x.remove(); });
    pois.lenngth = 0;
    listSearch.replaceChildren();
    
  }
  
}, 500 ));


Array.from(
  document.getElementById(#{idMenuLayers}).querySelectorAll('li')
).forEach(x => {
  x.addEventListener('click', e => {
    ui('mode', e.target.dataset.theme);
    map.setStyle(e.target.dataset.style);
  });
});

  
document.getElementById(#{idButttonCloseDialog}).addEventListener('click', e => {
  document.getElementById(#{idDialogOverviewTitle}).textContent = '';
  document.getElementById(#{idDialogOverviewContent}).textContent = '';
  document.getElementById(#{idDialogOverview}).close();
});


document.getElementById(#{idButtonZoomIn}).addEventListener('click', e => {
  map.zoomIn();
});

document.getElementById(#{idButtonZoomOut}).addEventListener('click', e => {
  map.zoomOut();
});

var myLocationMarker;
var myLocationWatchID;

document.getElementById(#{idButtonMyLocation}).addEventListener('click', function (e) {
  if (!myLocationMarker) {
    
    const watchOptions = {
      enableHighAccuracy: true,
      maximumAge: 10000,
      timeout: 5000
    };

    const onError = () => { console.error(#{msgr MsgCouldNotGetPosition}); };
    
    navigator.geolocation.getCurrentPosition(p => {
      
      map.flyTo({
        center: [p.coords.longitude, p.coords.latitude],
        essential: true
      });

      const elemMarker = document.createElement('div');
      elemMarker.className = 'marker marker-my-location circle one';
      myLocationMarker = new mapboxgl.Marker(elemMarker, {rotation: p.coords.heading});
      myLocationMarker.setLngLat([p.coords.longitude, p.coords.latitude]).addTo(map);

      const waveOne = document.createElement('div');
      waveOne.className = 'wave one';
      const waveTwo = document.createElement('div');
      waveTwo.className = 'wave two';

      waveOne.appendChild(waveTwo);
      elemMarker.appendChild(waveOne);
      
      myLocationWatchID = navigator.geolocation.watchPosition(p => {
        myLocationMarker.setLngLat([p.coords.longitude, p.coords.latitude]);
        if (!!p.coords.heading) {
          myLocationMarker.setRotation(p.coords.heading);
        }
      }, onError, watchOptions);

      map.once('moveend', () => {
        elemMarker.style.transition = 'transform 1s ease-out';
      });
            
    }, onError, watchOptions);
    
  } else {
    navigator.geolocation.clearWatch(myLocationWatchID);
    myLocationWatchID = null;
    myLocationMarker.remove();
    myLocationMarker = null;
  }
});



[ [#{queryAmenityCount "restaurant"}, #{idLabelRestaurants}],
  [#{queryTagCount "shop"}, #{idLabelShops}]
].map(([x,y]) => [x,document.getElementById(y)]).forEach(([q,e]) => {

  fetch(#{overpass},{
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded'},
    body: new URLSearchParams({ data: q })
  }).then(data => data.json()).then(res => {
    e.textContent = res.elements[0].tags.total;
  });
  
});


function markMap (query, icon) {

  markers.forEach(x => { x.remove(); });
  
  markers.length = 0;
  
  return fetch(#{overpass},{
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded'},
    body: new URLSearchParams({
      data: query
    })
  }).then(data => data.json()).then(res => {
    
    res.elements.filter(x => 'node' == x.type).forEach(x => {
      const el = document.createElement('div');
      el.className = `marker ${icon}`;

      el.addEventListener('click', (e) => {

        const name = x.tags['name:kk'] ? x.tags['name:kk']
              : ( x.tags['name:ru'] ? x.tags['name:ru']
                  : ( x.tags['name:en'] ? x.tags['name:en']
                      : x.tags.name
                    )
                );

        const descr = x.tags['description:kk'] ? x.tags['description:kk']
              : ( x.tags['description:ru'] ? x.tags['description:ru']
                  : ( x.tags['description:en'] ? x.tags['description:en']
                      : x.tags.description
                    )
                );

        document.getElementById(#{idDialogOverviewTitle}).textContent = name;
        
        if ('image' in x.tags) {

          const figure = document.createElement('figure');
          figure.style['text-align'] = 'center';
          
          const img = document.createElement('img');
          img.src = x.tags.image;
          img.height = 300;
          img.loading = 'lazy';
          
          const figcaption = document.createElement('figcaption');
          figcaption.textContent = descr ? descr : name;
          
          figure.replaceChildren(img,figcaption);
          document.getElementById(#{idDialogOverviewContent}).replaceChildren(figure);
          
        } else if ('wikidata' in x.tags) {


          const params = new URLSearchParams({
            action: 'wbgetclaims',
            entity: x.tags.wikidata,
            property: 'P18',
            format: 'json'
          });

          const url = encodeURIComponent(`https://www.wikidata.org/w/api.php?${params}`);
          
          fetch(`@{FetchP18PhotoR}?url=${url}`,{
            headers: {'Accept': 'application/json'}
          }).then((res) => res.json()).then(function (res) {

            if (!!res) {
              
              const src = `https://commons.wikimedia.org/w/thumb.php?width=300&f=${res.replaceAll(" ", "_")}`;

              const figure = document.createElement('figure');
              figure.style['text-align'] = 'center';
              
              const img = document.createElement('img');
              img.src = src;
              img.width = 300;
              img.loading = 'lazy';
              
              const figcaption = document.createElement('figcaption');
              figcaption.textContent = descr ? descr : name;
              
              figure.replaceChildren(img,figcaption);
              document.getElementById(#{idDialogOverviewContent}).replaceChildren(figure);
            }
            
          }).catch(err => {
            console.error(err);
          });
          
        } else {
          
          document.getElementById(#{idDialogOverviewContent}).textContent = descr ? descr : name;
          
        }
        
        document.getElementById(#{idDialogOverview}).show();
      });
      
      const marker = new mapboxgl.Marker(el);
      marker.setLngLat([x.lon, x.lat]).setOffset([0,-8]).addTo(map);
      markers.push(marker);
    });
  });
};


function progress() {
  const p = document.createElement('progress');
  p.className = 'circle small';
  return p;
}


function debounce(f,t) {
  let timeoutId = null;
  return (...args) => {
    window.clearTimeout(timeoutId);
    timeoutId = window.setTimeout(() => {
      f.apply(null, args);
    }, t);
  };
}
