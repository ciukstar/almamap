
var myLocationMarker;
var myLocationWatchID;

const markers = [];

mapboxgl.accessToken = #{mapboxPk};

const map = new mapboxgl.Map({
  container: #{idMap},
  bounds: #{toJSON bbox},
  style: #{style}
});


map.addControl(new mapboxgl.ScaleControl(),'bottom-left');

const nav = new mapboxgl.NavigationControl({
  showCompass: true,
  showZoom: false,
  visualizePitch: true
});

map.addControl(nav);

Array.from(
  document.body.querySelectorAll('.mapboxgl-ctrl-compass')
).forEach(x => {
  x.classList.add('circle','large','small-blur');
  x.title = #{msgr MsgCompass};
});

const queryTourism = #{query bbox "tourism" Nothing};
const queryParks = #{query bbox "leisure" (Just "park")};
const queryRestaurant = #{query bbox "amenity" (Just "restaurant")};
const queryGovernment = #{query bbox "government" Nothing};


document.getElementById(#{idInputAddress}).addEventListener('input', debounce(function (e) {
    
  const query = new URLSearchParams({
    q: e.target.value,
    viewbox: #{toJSON bbox},
    format: 'json'
  });
  
  const url = encodeURIComponent(new URL(`#{rawJS nominatim}?${query}`).href);
  
  fetch(`@{FetchR}?url=${url}`,{
    headers: {'Accept': 'application/json'}
  }).then(data => data.json()).then(function (res) {
    
    document.getElementById(#{idDatalistAddress}).replaceChildren(... res.map(x => {
      const option = document.createElement('option');
      option.value = x['display_name'];
      return option;
    }));
    
  });  
  
}, 500));


document.getElementById(#{idSpanAddress}).addEventListener('click', function (e) {
  
  const fieldAddress = document.getElementById(#{idFieldAddress});
  
  if (fieldAddress.style.display == 'none') {
    
    [ [#{idFieldLongitude},#{idInputLongitude}],
      [#{idFieldLatitude},#{idInputLatitude}]
    ].forEach(([x,y]) => {
      document.getElementById(y).value = '';
      document.getElementById(x).style.display = 'none';
    });
    
    fieldAddress.style.display = 'block';
    
  } else {
    document.getElementById(#{idInputAddress}).value = '';
    fieldAddress.style.display = 'none';
  }
});

document.getElementById(#{idSpanCoordinates}).addEventListener('click', function (e) {
  [ [#{idFieldLongitude},#{idInputLongitude}],
    [#{idFieldLatitude},#{idInputLatitude}]
  ].forEach(([x,y]) => {
    const field = document.getElementById(x);
    
    if (field.style.display == 'none') {
      
      document.getElementById(#{idInputAddress}).value = '';
      document.getElementById(#{idFieldAddress}).style.display = 'none';
      
      field.style.display = 'block';
      
    } else {
      document.getElementById(y).value = '';
      field.style.display = 'none';
    }
    
  });
});

  
const geolocationWatchOptions = {
  enableHighAccuracy: true,
  maximumAge: 10000,
  timeout: 10000
};


function fillTemplate (template, vars) {
  return new Function("return `" + template +"`").call(vars);
}

document.getElementById(#{idFormExploreNearby}).addEventListener('submit', function (e) {
  
  e.preventDefault();
  document.getElementById(#{idOverlay}).classList.remove('active');
  
  const data = new FormData(e.target);

  const longitude = data.get('longitude');
  const latitude = data.get('latitude');
  const address = data.get('address');
  const radius = 1000 * data.get('radius');
  const item = JSON.parse(data.get('item'));
  const marker = item.marker;
  const query = item.query;

  if (!!myLocationWatchID) {
    navigator.geolocation.clearWatch(myLocationWatchID);
    myLocationWatchID = null;
  }

  if (!!myLocationMarker) {
    myLocationMarker.remove();
    myLocationMarker = null;
  }
  
  new Promise(function (resolve, reject) {
    
    if (!!longitude && !!latitude) {
      
      resolve ([longitude,latitude,false]);
      
    } else if (!!address) {
      
      const query = new URLSearchParams({
        q: address,
        viewbox: #{toJSON bbox},
        format: 'json'
      });
      
      const url = encodeURIComponent(new URL(`#{rawJS nominatim}?${query}`).href);
      
      return fetch(`@{FetchR}?url=${url}`,{
        headers: {'Accept': 'application/json'}
      }).then(data => data.json()).then(function (res) {
        
        if (res.length > 0) {
          resolve ([Number(res[0].lon),Number(res[0].lat),false]);
        } else {
          reject ("Address cannot be translated to coorinates");
        }
        
      });
      
    } else {
          
      navigator.geolocation.getCurrentPosition(
        p => resolve([p.coords.longitude, p.coords.latitude, true]),
        onGeolocationPositionError(#{msgr MsgGeolocationStatusDisabledExploreNearby}), geolocationWatchOptions
      );
      
    }
    
  }).then(function ([lng,lat,watchMyLocation]) {
    
    const disk = `${radius},${lat},${lng}`;

    const q = fillTemplate(query,{myloc: disk});

    const data = fetchQuery(q).then(function (data) {
      
      if (data.elements.length > 0) {
        
        const pool = [ [ lng,lat ], ... data.elements.map(x => [x.lon,x.lat]) ];

        const pad = 0.005;
        const bbox = new mapboxgl.LngLatBounds(
          new mapboxgl.LngLat(Math.min(... pool.map(([x,_]) => x)) - pad, Math.min(... pool.map(([_,y]) => y)) - pad),
          new mapboxgl.LngLat(Math.max(... pool.map(([x,_]) => x)) + pad, Math.max(... pool.map(([_,y]) => y)) + pad)
        );

        map.fitBounds(bbox);

        const elemMarker = document.createElement('div');
        elemMarker.className = 'marker marker-my-location circle one';
        myLocationMarker = new mapboxgl.Marker(elemMarker);
        myLocationMarker.setLngLat([lng, lat]).addTo(map);

        const waveOne = document.createElement('div');
        waveOne.className = 'wave one';
        const waveTwo = document.createElement('div');
        waveTwo.className = 'wave two';

        waveOne.appendChild(waveTwo);
        elemMarker.appendChild(waveOne);

        if (watchMyLocation) {
          myLocationWatchID = navigator.geolocation.watchPosition(p => {
            myLocationMarker.setLngLat([p.coords.longitude, p.coords.latitude]);
            if (!!p.coords.heading) {
              myLocationMarker.setRotation(p.coords.heading);
            }
          }, onGeolocationPositionError(#{msgr MsgGeolocationStatusDisabledExploreNearby}), geolocationWatchOptions);
        }

        map.once('moveend', () => {
          elemMarker.style.transition = 'transform 1s ease-out';
        });
        
      } else {
        document.getElementById(#{idMain}).appendChild(
          snackbar(#{msgr MsgNoLocationsWereFound})
        );
      }
      
      return data;
      
    });
    
    markMap(data,marker);

    document.getElementById(#{idDialogExploreNearby}).close();
    
  });
  
});


var currentChip = #{defaultChip};
var currentColor = 'white';

document.getElementById(#{idButtonPois}).addEventListener('click', function (e) {
  document.getElementById(#{idDialogPois}).show();
});

document.getElementById(#{idButtonCloseDialogPois}).addEventListener('click', function (e) {
  document.getElementById(#{idDialogPois}).close();
});


Array.from(
  document.getElementById(#{idDialogPois}).querySelectorAll('button.chip[data-value][data-icon][data-pin][data-query]')
).forEach(x => {
  x.addEventListener('click', e => {
    updatePois(e.target.dataset.query, e.target.dataset.pin).then(_ => {

      Array.from(
        document.getElementById(#{idDialogPois}).querySelectorAll('button.chip[data-icon]')
      ).forEach(y => {
        y.classList.remove('fill');
        y.querySelector('i').textContent = y.dataset.icon;
      });

      e.target.classList.add('fill');
      e.target.querySelector('i').textContent = 'done';
      document.getElementById(#{idButtonPois}).querySelector('i').textContent = e.target.dataset.icon;

      currentChip = e.target.dataset.value;
      
    });
  });
});


function updatePois (query, icon) {
  return fetchQuery(query).then(
    data => data.elements
  ).then(
    data => data.map(e => ({type: 'Feature', geometry: e.geometry, properties: e.tags}))
  ).then(
    data => ({ type: 'FeatureCollection', features: data })
  ).then(data => {
    map.getSource('pois').setData(data);
    map.setLayoutProperty('unclustered-point', 'icon-image', icon);
  });
};


function loadPois (query, icon, color) {
  
  return fetchQuery(query).then(
    data => data.elements
  ).then(
    data => data.map(e => ({type: 'Feature', geometry: e.geometry, properties: e.tags}))
  ).then(
    data => ({ type: 'FeatureCollection', features: data })
  ).then(data => {
    
    map.addSource('pois', {
      type: 'geojson',
      data: data,
      cluster: true,
      clusterMaxZoom: 14,
      clusterRadius: 50
    });
    
    map.addLayer({
      id: 'clusters',
      type: 'circle',
      source: 'pois',
      filter: ['has', 'point_count'],
      paint: {
        'circle-color': [
          'step',
          ['get', 'point_count'], '#51bbd6',
          100, '#f1f075',
          750, '#f28cb1'
        ],
        'circle-radius': [
          'step',
          ['get', 'point_count'],
          20,
          100,
          30,
          750,
          40
        ]
      }
    });

    map.addLayer({
      id: 'cluster-count',
      type: 'symbol',
      source: 'pois',
      filter: ['has', 'point_count'],
      layout: {
        'text-field': ['get', 'point_count_abbreviated'],
        'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
        'text-size': 12
      }
    });

    map.addLayer({
      id: 'unclustered-point',
      type: 'symbol',
      source: 'pois',
      filter: ['!', ['has', 'point_count']],
      layout: {
        'icon-image': icon,
        'icon-size': 1,
        'text-field': ['get', 'name'],
        'text-font': [
          'Open Sans Bold',
          'Arial Unicode MS Bold'
        ],
        'text-offset': [0, 1],
        'text-anchor': 'top',
        'text-size': 12
      },
      paint: {
        'text-color': color
      }
    });

    map.on('click', 'clusters', (e) => {
      const features = map.queryRenderedFeatures(e.point, {
        layers: ['clusters']
      });
      const clusterId = features[0].properties.cluster_id;
      map.getSource('pois').getClusterExpansionZoom(
        clusterId,
        (err, zoom) => {
          if (err) return;

          map.easeTo({
            center: features[0].geometry.coordinates,
            zoom: zoom
          });
        }
      );
    });

    map.on('click', 'unclustered-point', (e) => {
      displayOverview(e.features[0].properties);
    });

    return data;
  });
  
};


const searchSheet = document.getElementById(#{idDialogSearch});

document.getElementById(#{idButtonSearchTrigger}).addEventListener('click', e => {
  searchSheet.show();
});

document.getElementById(#{idButtonCloseSearchDialog}).addEventListener('click', e => {
  searchSheet.close();
});

Array.from(
  document.getElementById(#{idDialogSearchByCategory}).querySelectorAll('a')
).forEach(x => {
  x.addEventListener('click', e => {
    e.target.querySelector('i.end-icon').replaceChildren((() => {
      const p = document.createElement('progress');
      p.className = 'circle small';
      return p;
    }) ());
  });
});


document.getElementById(#{idButtonSearchByCategoryTrigger}).addEventListener('click', e => {
  document.getElementById(#{idDialogSearchByCategory}).show();
});

document.getElementById(#{idButtonCloseSearchByCategoryDialog}).addEventListener('click', e => {
  document.getElementById(#{idDialogSearchByCategory}).close();
});

document.getElementById(#{idButtonMainMenu}).addEventListener('click', e => {
  document.getElementById(#{idDialogMainMenu}).show();
});

document.getElementById(#{idListSearchResults}).addEventListener('scroll', e => {
  e.preventDefault();
  e.stopPropagation();
});


[ [#{idDialogSearch}, #{idListSearchResults}]
].map(
  xs => xs.map(x => document.getElementById(x))
).map(
  ([dlg,list]) => [dlg,list,dlg.querySelector('[draggable=true]')]
).forEach(([sheet,list,draggable]) => {
  
  draggable.addEventListener('dragstart', e => {
    e.preventDefault();
    e.stopPropagation();
  });
  
  draggable.addEventListener('drag', e => {
    const h = `${window.innerHeight - e.clientY + 32}px`;
    list.style.height = `calc(${h}  - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });
  
  draggable.addEventListener('dragend', e => {
    const h = `${window.innerHeight - e.clientY + 32}px`;
    list.style.height = `calc(${h} - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('touchstart', e => {
    e.preventDefault();
    e.stopPropagation();
  });

  draggable.addEventListener('touchmove', e => {
    const h = `${window.innerHeight - e.touches.item(0).clientY + 32}px`;
    list.style.height = `calc(${h} - (3.5rem + 6rem))`;
    e.preventDefault();
    e.stopPropagation();
  });
  
});


const listSearch = document.getElementById(#{idListSearchResults});
const pois = [];

document.getElementById(#{idInputSearch}).addEventListener('input', debounce( function (e) {

  if (!!e.target.value) {

    listSearch.replaceChildren(progress());
    
    const query = new URLSearchParams({
      q: e.target.value,
      viewbox: #{toJSON bbox},
      format: 'json'
    });
    
    const url = encodeURIComponent(new URL(`#{rawJS nominatim}?${query}`).href);
    
    fetch(`@{FetchR}?url=${url}`,{
      headers: {'Accept': 'application/json'}
    }).then(data => data.json()).then(function (res) {

      if (res.length > 0) {
        
        listSearch.replaceChildren( ... res.map(x => {
          const item = document.createElement('a');
          item.className = 'row padding surface-container wave';

          const start = document.createElement('i');
          start.textContent = 'explore_nearby';      
          
          const content = document.createElement('div');
          content.className = 'max';
          
          const primaryText = document.createElement('div');
          primaryText.className = 'max';
          primaryText.textContent = x['display_name'];

          const end = document.createElement('i');
          end.textContent = 'arrow_forward_ios';
          
          content.appendChild(primaryText);
          
          item.appendChild(start);
          item.appendChild(content);
          item.appendChild(end);

          item.addEventListener('click', e => {
            
            searchSheet.close();
            setTimeout(() => {
              const poi = new mapboxgl.Marker().setLngLat([x.lon, x.lat]).setOffset([0,-8]).addTo(map);
              pois.push(poi);
              map.flyTo({
                center: poi.getLngLat().toArray(),
                essential: true
              });
            },300);
            
          });
          
          return item;
          
        }));

      } else {
        
        listSearch.replaceChildren((() => {
          const msg = document.createElement('div');
          msg.className = 'italic padding';
          msg.textContent = #{msgr MsgNoLocationsWereFound};
          return msg; 
        })());
        
      }
      
    });

  } else {
    
    pois.forEach(x => { x.remove(); });
    pois.lenngth = 0;
    listSearch.replaceChildren();
    
  }
  
}, 500 ));


map.on('style.load', function (e) {
  
  [ ['icon_attractions', '@{StaticR img_attractions_pin_720dp_png}'],
    ['icon_park', '@{StaticR img_park_pin_720dp_png}'],
    ['icon_restaurant', '@{StaticR img_restaurant_pin_720dp_png}'],
    ['icon_government', '@{StaticR img_account_balance_pin_720dp_png}']
  ].forEach(([icon, link]) => {
    const img = new Image(26,26);
    img.onload = () => map.addImage(icon, img, { sdf: false });
    img.src = link;
  });
  
  if (currentChip === 'attractions') {
    loadPois(queryTourism, 'icon_attractions', currentColor)
  } else if (currentChip === 'park') {
    loadPois(queryParks, 'icon_park', currentColor)
  } else if (currentChip === 'restaurant') {
    loadPois(queryRestaurant, 'icon_restaurant', currentColor)
  } else if (currentChip === 'government') {
    loadPois(queryGovernment, 'icon_government', currentColor)
  }
});


Array.from(
  document.getElementById(#{idMenuLayers}).querySelectorAll('li')
).map(x => x.querySelector('input[type=radio]')).forEach(x => {
  x.addEventListener('input', function (e) {
    ui('mode', e.target.dataset.theme);
    currentColor = e.target.dataset.color;
    map.setStyle(e.target.value);    
  });
});

  
document.getElementById(#{idButttonCloseDialogOverview}).addEventListener('click', e => {
  document.getElementById(#{idDialogOverviewTitle}).textContent = '';
  document.getElementById(#{idDialogOverviewContent}).textContent = '';
  document.getElementById(#{idDialogOverview}).close();
});


document.getElementById(#{idButtonExploreNearby}).addEventListener('click', e => {

  navigator.permissions.query({name: 'geolocation'}).then(function (x) {
    if (x.state === 'denied') {
      document.getElementById(#{idGeolocationStatusIcon}).textContent = 'location_off';
      document.getElementById(#{idGeolocationStatusLabel}).textContent = #{msgr MsgGeolocationDisabled} + '...';
      document.getElementById(#{idGeolocationStatusUserMessage}).textContent = #{msgr MsgGeolocationStatusDisabledExploreNearby};
    } else {
      document.getElementById(#{idGeolocationStatusIcon}).textContent = 'info';
      document.getElementById(#{idGeolocationStatusLabel}).textContent = #{msgr MsgAboutYourLocation} + '...';
      document.getElementById(#{idGeolocationStatusUserMessage}).textContent = #{msgr MsgGeolocationStatusUserMessage};
    }
  });
  
  document.getElementById(#{idDialogExploreNearby}).show();
});


[ #{idButttonCloseDialogExploreNearby},
  #{idButttonCancelDialogExploreNearby}
].forEach(x => {
  document.getElementById(x).addEventListener('click', e => {
    document.getElementById(#{idDialogExploreNearby}).close();
  });
});

document.getElementById(#{idButtonZoomIn}).addEventListener('click', e => {
  map.zoomIn();
});

document.getElementById(#{idButtonZoomOut}).addEventListener('click', e => {
  map.zoomOut();
});

document.getElementById(#{idButtonMyLocation}).addEventListener('click', function (e) {
  
  if (!myLocationMarker) {
    
    navigator.geolocation.getCurrentPosition(p => {
      
      map.flyTo({
        center: [p.coords.longitude, p.coords.latitude],
        essential: true
      });

      const elemMarker = document.createElement('div');
      elemMarker.className = 'marker marker-my-location circle one';
      myLocationMarker = new mapboxgl.Marker(elemMarker, {rotation: p.coords.heading});
      myLocationMarker.setLngLat([p.coords.longitude, p.coords.latitude]).addTo(map);

      const waveOne = document.createElement('div');
      waveOne.className = 'wave one';
      const waveTwo = document.createElement('div');
      waveTwo.className = 'wave two';

      waveOne.appendChild(waveTwo);
      elemMarker.appendChild(waveOne);
      
      myLocationWatchID = navigator.geolocation.watchPosition(p => {
        myLocationMarker.setLngLat([p.coords.longitude, p.coords.latitude]);
        if (!!p.coords.heading) {
          myLocationMarker.setRotation(p.coords.heading);
        }
      }, onGeolocationPositionError(#{msgr MsgGeolocationStatusDisabledUserMessage}), geolocationWatchOptions);

      map.once('moveend', () => {
        elemMarker.style.transition = 'transform 1s ease-out';
      });
            
    }, onGeolocationPositionError(#{msgr MsgGeolocationStatusDisabledUserMessage}), geolocationWatchOptions);
    
  } else {
    navigator.geolocation.clearWatch(myLocationWatchID);
    myLocationWatchID = null;
    myLocationMarker.remove();
    myLocationMarker = null;
  }
  
});



[ [#{queryAmenityCount bbox "restaurant"}, #{idLabelRestaurants}],
  [#{queryTagCount bbox "shop"}, #{idLabelShops}]
].map(([x,y]) => [x,document.getElementById(y)]).forEach(([q,e]) => {

  fetch(#{overpass},{
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded'},
    body: new URLSearchParams({ data: q })
  }).then(data => data.json()).then(res => {
    e.textContent = res.elements[0].tags.total;
  });
  
});


function fetchQuery (query) {
  
  return fetch(#{overpass}, {
    method: 'POST',
    headers: { 'Content-Type': 'application/x-www-form-urlencoded'},
    body: new URLSearchParams({
      data: query
    })
  }).then(data => data.json());
  
};


function displayOverview (properties) {

  const name = properties['name:kk'] ? properties['name:kk']
        : ( properties['name:ru'] ? properties['name:ru']
            : ( properties['name:en'] ? properties['name:en']
                : properties.name
              )
          );

  const descr = properties['description:kk'] ? properties['description:kk']
        : ( properties['description:ru'] ? properties['description:ru']
            : ( properties['description:en'] ? properties['description:en']
                : properties.description
              )
          );

  document.getElementById(#{idDialogOverviewTitle}).textContent = name;

  if ('image' in properties) {

    const figure = document.createElement('figure');
    figure.style['text-align'] = 'center';

    const img = document.createElement('img');
    img.src = x.tags.image;
    img.height = 300;
    img.loading = 'lazy';

    const figcaption = document.createElement('figcaption');
    figcaption.textContent = descr ? descr : name;

    figure.replaceChildren(img,figcaption);
    document.getElementById(#{idDialogOverviewContent}).replaceChildren(figure);

  } else if ('wikidata' in properties) {


    const params = new URLSearchParams({
      action: 'wbgetclaims',
      entity: properties.wikidata,
      property: 'P18',
      format: 'json'
    });

    const url = encodeURIComponent(`https://www.wikidata.org/w/api.php?${params}`);

    fetch(`@{FetchP18PhotoR}?url=${url}`,{
      headers: {'Accept': 'application/json'}
    }).then((res) => res.json()).then(function (res) {

      if (!!res) {

        const src = `https://commons.wikimedia.org/w/thumb.php?width=300&f=${res.replaceAll(" ", "_")}`;

        const figure = document.createElement('figure');
        figure.style['text-align'] = 'center';

        const img = document.createElement('img');
        img.src = src;
        img.width = 300;
        img.loading = 'lazy';

        const figcaption = document.createElement('figcaption');
        figcaption.textContent = descr ? descr : name;

        figure.replaceChildren(img,figcaption);
        document.getElementById(#{idDialogOverviewContent}).replaceChildren(figure);
      }

    }).catch(err => {
      console.error(err);
    });

  } else {

    document.getElementById(#{idDialogOverviewContent}).textContent = descr ? descr : name;

  }

  document.getElementById(#{idDialogOverview}).show();
  
};


function markMap (data, icon) {

  markers.forEach(x => { x.remove(); });
  markers.length = 0;
  
  return data.then(res => {
    
    res.elements.filter(x => 'node' == x.type).forEach(x => {
      const el = document.createElement('div');
      el.className = `marker ${icon}`;

      el.addEventListener('click', (e) => {

        const name = x.tags['name:kk'] ? x.tags['name:kk']
              : ( x.tags['name:ru'] ? x.tags['name:ru']
                  : ( x.tags['name:en'] ? x.tags['name:en']
                      : x.tags.name
                    )
                );

        const descr = x.tags['description:kk'] ? x.tags['description:kk']
              : ( x.tags['description:ru'] ? x.tags['description:ru']
                  : ( x.tags['description:en'] ? x.tags['description:en']
                      : x.tags.description
                    )
                );

        document.getElementById(#{idDialogOverviewTitle}).textContent = name;
        
        if ('image' in x.tags) {

          const figure = document.createElement('figure');
          figure.style['text-align'] = 'center';
          
          const img = document.createElement('img');
          img.src = x.tags.image;
          img.height = 300;
          img.loading = 'lazy';
          
          const figcaption = document.createElement('figcaption');
          figcaption.textContent = descr ? descr : name;
          
          figure.replaceChildren(img,figcaption);
          document.getElementById(#{idDialogOverviewContent}).replaceChildren(figure);
          
        } else if ('wikidata' in x.tags) {


          const params = new URLSearchParams({
            action: 'wbgetclaims',
            entity: x.tags.wikidata,
            property: 'P18',
            format: 'json'
          });

          const url = encodeURIComponent(`https://www.wikidata.org/w/api.php?${params}`);
          
          fetch(`@{FetchP18PhotoR}?url=${url}`,{
            headers: {'Accept': 'application/json'}
          }).then((res) => res.json()).then(function (res) {

            if (!!res) {
              
              const src = `https://commons.wikimedia.org/w/thumb.php?width=300&f=${res.replaceAll(" ", "_")}`;

              const figure = document.createElement('figure');
              figure.style['text-align'] = 'center';
              
              const img = document.createElement('img');
              img.src = src;
              img.width = 300;
              img.loading = 'lazy';
              
              const figcaption = document.createElement('figcaption');
              figcaption.textContent = descr ? descr : name;
              
              figure.replaceChildren(img,figcaption);
              document.getElementById(#{idDialogOverviewContent}).replaceChildren(figure);
            }
            
          }).catch(err => {
            console.error(err);
          });
          
        } else {
          
          document.getElementById(#{idDialogOverviewContent}).textContent = descr ? descr : name;
          
        }
        
        document.getElementById(#{idDialogOverview}).show();
      });
      
      const marker = new mapboxgl.Marker(el);
      marker.setLngLat([x.lon, x.lat]).setOffset([0,-8]).addTo(map);
      markers.push(marker);
      
    });
  });
};


function onGeolocationPositionError (message) {

  return function (err) {
    if (err.code == GeolocationPositionError.PERMISSION_DENIED) {
      document.getElementById(#{idMain}).appendChild(
        snackbar(message,'error', 15000)
      );

    } else if (err.code == GeolocationPositionError.POSITION_UNAVAILABLE) {
      document.getElementById(#{idMain}).appendChild(
        snackbar(#{msgr MsgGeolocationNotSupportedUserMessage},'error', 15000)
      );

    } else if (err.code == GeolocationPositionError.TIMEOUT) {
      document.getElementById(#{idMain}).appendChild(
        snackbar(#{msgr MsgGeolocationStatusTimeoutUserMessage},'error', 15000)
      );

    } else {
      
      document.getElementById(#{idMain}).appendChild(
        snackbar(#{msgr MsgCouldNotGetPosition},'error', 15000)
      );
      console.error(err);

    }
  };
  
};
