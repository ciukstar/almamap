
mapboxgl.accessToken = #{mapboxPk};

const bounds = #{toJSON (entityVal <$> bbox)};

const map = new mapboxgl.Map({
  container: #{idMapboxMap},
  style: #{mapboxStyle},
  language: #{toJSON langs},
  bounds: bounds,
  center: #{toJSON $ fromMaybe (0,0) center},
  zoom: #{toJSON zoom}
});

const inputMinLon = document.getElementById(#{idInputMinLon});
const inputMinLat = document.getElementById(#{idInputMinLat});
const inputMaxLon = document.getElementById(#{idInputMaxLon});
const inputMaxLat = document.getElementById(#{idInputMaxLat});

['zoomend','dragend'].forEach(x => {
  map.on(x, function (e) {
    
    if (!!e.originalEvent) {
      [inputMinLon.value,inputMinLat.value] = map.unproject([0,map.getContainer().clientHeight]).toArray();
      
      [inputMaxLon.value,inputMaxLat.value] = map.unproject([map.getContainer().clientWidth,0]).toArray();
    }
    
  });
});

[inputMinLon, inputMinLat, inputMaxLon, inputMaxLat].forEach(x => {
  x.addEventListener('input', function (e) {
    map.fitBounds([ [inputMinLon.value, inputMinLat.value],
                    [inputMaxLon.value, inputMaxLat.value]
                  ]);
  });
});


document.getElementById(#{idButtonShowBboxForm}).addEventListener('click', e => {
  document.getElementById(#{idBboxFormWrapper}).style.display = 'block';
  document.getElementById(#{idFigureShowBboxForm}).style.display = 'none';
});

document.getElementById(#{idButtonShowDialogDelete}).addEventListener('click', e => {
  document.getElementById(#{idDialogDelete}).show();
});
